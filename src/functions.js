/**
* the \@param notation indicates an input paramater for a function. For example
* @param {string} foobar - indicates the function should accept a string
* and it should be called foobar, for example function(foobar){}
* \@return is the value that should be returned
*/

/**
* Write a function called `uselessFunction`.
* It should accept no arguments.
* It should return the null value.
* @return {null} - 'useless'.
*/

//your code here
function uselessFunction() {

	return null;
}
//end your code

var bar = 'not a function';
var barType = typeof bar;

/**
* Assign the above variable 'bar' to an anonymous function with the following
* properites.
* @param {float[]} doubleArray - an array of floating point numbers.
* The function should multiply every number in the array by 2 (this should
* change the content of the array).
* @return {boolean} - true if the operation was sucessful, false otherwise.
* This should return false if any value in the array cannot be doubled.
*/

//your code here
bar = function (doubleArray) {

	var i;
	var _tempArray = doubleArray.concat();  
	/*It seems that you need the concat() function, so that changes to
	doubleArray won't affect the _tempArray. Otherwise, the function will fail.
	I found about the concat function @ 
	http://stackoverflow.com/questions/16232915/copying-an-array-of-objects-into-another-array-in-javascript*/

	for(i=0; i<doubleArray.length; i++) {
		doubleArray[i] *= 2;
	}

	for(i=0; i<doubleArray.length; i++) {
		
		if ((_tempArray[i] * 2) != doubleArray[i]) {
			return false;
		}
	}

	return true;

}
//end your code

/**
* Creates a new GitLog
* @class
* @property {string} hash - the hash of the commit
* @property {Date} date - the date of the commit as a JS Date object
* @property {string} message - the commit message
*/
function GitLog(hash, date, message) {
    this.hash = hash;
    this.date = date;
    this.message = message;
}

/**
* Create a function called parseGit to parse Git commit logs
* The logs will be generated by the following command
* git log --pretty=format:"%h %ad \"%s\"" --date=rfc
* The result looks like this
* 3782618 Wed, 7 Jan 2015 21:42:26 -0800 "Initial commit"
* |hash | |             date           | |   message    |
* There will always be a space between the hash and date and between the date
* and the first " of the commit message.
*
* You will covert these into GitLog objects with the following properties:
*
*
* @param {array.<string>} logArray - an array of Git commit messages of the
* above
* format.
* @return {array.<GitLog>} - return an array GitLog instances
*/

//your code here

/*I am starting off from the instructor's template in Piazza */
function parseGit(logArray) {
  var results = []; //This array will contain a list of GitLog objects
  var i;
  var x 
  //your code goes here
  for (i=0; i<logArray.length; i++) {
  
  		results.push(new GitLog(logArray[i].split(' ')[0], 
  			new Date(logArray[i].split(' ')[1] + ' ' + logArray[i].split(' ')[2] + ' ' 
  			 + logArray[i].split(' ')[3] + ' ' + logArray[i].split(' ')[4] + ' ' + logArray[i].split(' ')[5] + ' '
  			 + logArray[i].split(' ')[6]), 
  			logArray[i].split('"')[1]));
  
  }//here you loop over the logArray one by one, parse each commit, create a GitLog object with appropriate values and add it to results array	
  //end of your code
  return results;
}
//end your code
